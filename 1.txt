test
Добрый день. Михаил! Отличная работа! Вам удалось справиться с задачей, тесты успешно пройдены и игры запускаются

Сейчас наступает не менее важная часть разработки - рефакторинг кода. Далее я отправлю список замечаний. 
Ваша задача внимательно изучить их и внести исправления в свой код
_________________

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L20

write - переводится как писать, наверное имелось ввиду right

_________________

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L8-L13

Есть ли смысл выделять такой код в отдельную функции?
Таким образом мы создаем лишнюю абстракцию, которая скрывает за собой только вызов console.log,

_________________


https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L2

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L23

Не нужно смешивать начальные модули (с первых шагов) с кодом основного приложения.
Этот момент отдельно описан на 5 шаге. Таким образом у нас в движке появилась лишняя зависимость от cli

_________________

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L4

Данная функция отличный кандидат для вынесения её в отдельный файл, обычно в проекте заводится что-то вроде ./src/utils.js
в котором содержатся общие функции, не имеющие отношения к доменной области приложения и 
которые могут быть переиспользованы в любой части приложения,
Также неплохо было бы иметь возможность задать начальный и конечный диапазон для генерации значений, 
сейчас можно только от 0 и до max

_________________


https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/games/evenGame.js#L3-L8

В этой функции есть нарушение абстракции, в этой [статье](https://ru.hexlet.io/courses/js-functions/lessons/abstraction/theory_unit)
можно подробнее прочесть об этой проблеме

Интересно что в коде есть правильная версия этой функции, но не в нужном месте)

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L5

_________________

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L14

Функции это всегда глаголы, подобробнее о хорошем наименование можно почитать [здесь ](https://ru.hexlet.io/blog/posts/naming-errors-1)
Также в этой функции используется неявный способ преобразования типов
https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L18
лучше делать более явно к пример `Number(str)` для того чтобы при каждом прочтении кода не вспоминать 
о таких трюках с неявным преобразованием

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/index.js#L16-L17

Без контекста понять такой код будет очень сложно

При этом преобразование форматов для каждой игры - это не обязанность движка, это уже логика самой игры, 
если завтра у нас появится новая игра где вариантом ответа будет не yes, no, а y,n 
или же вопрос будет требовать именно текстового ответа, 
в таком случае нам придется переписывать эту функцию для каждого нового случая

_________________


https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/games/calculatorGame.js#L16
Вывод вопроса (взаимодействие с пользователем) - это ответственность движка - сама игра должна только передавать движку данные для работы
В будущем может появится требование - запустить все игры в браузере - и в таком случае придется переписывать все игры, и поддеривать
игры для двух платформ станет затруднительным

_________________

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/games/calculatorGame.js#L7-L9

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/games/calculatorGame.js#L13-L15

Тут у нас создаются переменные, которые мутируются внутри другой функции, такой подход чреват сложно отлаживаемыми ошибками

_________________


https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/src/games/calculatorGame.js#L18-L19

eslint - не просто так запрещает использование функции eval, это потенциально опасный код. 

_________________

https://github.com/mn81566/frontend-project-lvl1/blob/5d0c3a37283ddb04f5958ad9921986260048257e/package.json#L5

Здесь было бы хорошо добавить описание проекта из которого можно было бы сразу понять о чем проект
